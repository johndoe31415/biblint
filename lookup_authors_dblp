#!/usr/bin/python3
import time
import requests
import sys
import json
import textwrap
import urllib.parse
from SQLite import SQLite
from XMLParser import XMLParser

if len(sys.argv) != 2:
	print("%s [Author JSON File]" % (sys.argv[0]))
	print()
	for line in textwrap.wrap("Takes a JSON file of authors as it is outputted by biblint. Searches for these authors using dblp in order to find inconsistent use of names."):
		print(line)
	sys.exit(1)

filename = sys.argv[1]
with open(filename) as f:
	jsonstr = f.read()
authors = json.loads(jsonstr)

def whole_name_fml(author):
	return " ".join(name for name in (author["firstname"], author["midname"], author["lastname"]) if name is not None)

def names_equal(n1, n2):
	n1 = n1.replace(".", "")
	n2 = n2.replace(".", "")
	return n1 == n2

db = SQLite("author_scan_cache.sqlite3")
db.exec_mayfail_commit("""
	CREATE TABLE dblp_cache (
		cid integer NOT NULL PRIMARY KEY,
		uri varchar NOT NULL UNIQUE,
		data blob NOT NULL,
		created timestamp DEFAULT CURRENT_TIMESTAMP
	);
""")

# Don't be a dick towards DBLP (they'll respond with "Too Many Requests" when
# this is just one second)
gracetime = 1.5

for author in authors:
	author_name = whole_name_fml(author)
	url = "http://dblp.uni-trier.de/search/author?xauthor=%s" % (urllib.parse.quote_plus(author_name))

	reply = db.execute("SELECT data FROM dblp_cache WHERE uri = ?;", url).fetchone()
	if reply is None:
		reply = requests.get(url)
		if reply.status_code != 200:
			print("DBLP server sent HTTP %d" % (reply.status_code))
			continue
		reply = reply.text
		db.execute("INSERT INTO dblp_cache (uri, data) VALUES (?, ?);", url, reply)
		db.commit()
		time.sleep(gracetime)
	else:
		reply = reply[0]

	node = XMLParser().parse(reply)
	if node is None:
		print("Cannot parse DBLP reply.")
		continue


	if node.getchild("author") is None:
		authors = [ ]
	else:
		authors = [ ]
		for author in node.author:
			authors.append(author.getstrippedcdata().replace(".", ""))
		authors.sort()

	have_right_author = any(names_equal(author, author_name) for author in authors)
	if not have_right_author:
		print(author_name)
		if len(authors) == 0:
			print("    -")
		else:
			for author in authors:
				if names_equal(author, author_name):
					print("  -> %s" % (author))
				else:
					print("     %s" % (author))
		print()
