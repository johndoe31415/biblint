#!/usr/bin/python3 -O
#
#	biblint - Static checking of BibTeX files to find errors or inconsistencies.
#	Copyright (C) 2016-2016 Johannes Bauer
#
#	This file is part of biblint.
#
#	biblint is free software; you can redistribute it and/or modify
#	it under the terms of the GNU General Public License as published by
#	the Free Software Foundation; this program is ONLY licensed under
#	version 3 of the License, later versions are explicitly excluded.
#
#	biblint is distributed in the hope that it will be useful,
#	but WITHOUT ANY WARRANTY; without even the implied warranty of
#	MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
#	GNU General Public License for more details.
#
#	You should have received a copy of the GNU General Public License
#	along with biblint; if not, write to the Free Software
#	Foundation, Inc., 59 Temple Place, Suite 330, Boston, MA  02111-1307  USA
#
#	Johannes Bauer <joe@johannes-bauer.com>
#

import glob
import sys
import json
import textwrap
from Bibliography import Bibliography
from FriendlyArgumentParser import FriendlyArgumentParser
from HTMLComplaintRenderer import HTMLComplaintRenderer
from Citations import Citations
from OptionSet import OptionSet
from BibUtils import BibUtils
from LintDB import LintDB
from TexPreprocessor import TexPreprocessor
import BibLintChecks
import TexLintChecks

db = LintDB()
db.scan_module(BibLintChecks)
db.scan_module(TexLintChecks)

special_sets = {
	"DEFAULT":	"ALL:-check-local-copies:-check-similar-titles",
	"TEX":		":".join(cls.name for cls in db.get_check_classes_by_linttarget("tex")),
	"BIB":		":".join(cls.name for cls in db.get_check_classes_by_linttarget("bib")),
}
oset = OptionSet(db.known_check_names, special_sets = special_sets)
parser = FriendlyArgumentParser()
parser.set_additional_help_callback(db.print_help)
parser.add_argument("-c", "--check", metavar = "checkstr", type = str, default = oset.get_string("DEFAULT"), help = "Checks to perform. Defaults to %(default)s. Recognized checks are " + (", ".join(db.known_check_names)) + ". Special values are ALL, DEFAULT, TEX or BIB. A valid lint check string is separated by colons and every item is prefixed with + or -. The plus character can be omitted, the string is case-insensitive. One example would be '+foo-check:+bar-check' to only check 'foo' and 'bar'. Another one would be 'DEFAULT:-dumb-check' to check the ones enabled by default but disable 'dumb'. ")
parser.add_argument("-i", "--ignore-suppressions", action = "store_true", help = "Do not honor suppressions and always emit warnings.")
parser.add_argument("-f", "--format", choices = [ "short", "long", "json", "html", "quickfix" ], default = "short", help = "Display the lint messages in the specified format. Choices are %(choices)s, default is %(default)s.")
parser.add_argument("-o", "--output", metavar = "path", default = "-", help = "Specifies where to output the specific data to. Can be stdout by specifying '-'. Defaults to %(default)s.")
parser.add_argument("-l", "--localdir", metavar = "path", default = "bibliography/", help = "Points to the directory where the local bibliography is expected. Defaults to %(default)s.")
parser.add_argument("-a", "--action", choices = [ "lint", "authorscan", "printbib", "printtex" ], default = "lint", help = "Specifies the action that should be done with the given files. Can be one of %(choices)s, default is %(default)s. 'lint' does a regular lint scan, 'authorscan' outputs a JSON file of all authors, 'printbib' emits the scanned bibliography in a pretty-printed version and 'printtex' prints the raw text of the TeX file(s) that were given.")
parser.add_argument("--internal-tex-reformat", action = "store_true", default = False, help = "Translate the TeX file internally in the same manner that it is internally done before linting. Mainly useful for debugging purposes.")
parser.add_argument("--use-ansi", action = "store_true", default = False, help = "Use ANSI escape sequences to print colored error messages if the output formatter supports it.")
parser.add_argument("--only-cited-bibentries", action = "store_true", help = "Lint only those bibliography entries that are referenced within the given TeX files using cite commands.")
parser.add_argument("--update-readme", action = "store_true", help = "Updates the README.md file automatically with the data from the available check classes. Usually only needed for development of biblint.")
parser.add_argument("-v", "--verbose", action = "store_true", help = "Be more verbose when checking")
parser.add_argument("files", metavar = "bib/texfile", type = str, nargs = "+", help = "Bibliography (.bib) or TeX (.tex) files which should be checked.")
args = parser.parse_args(sys.argv[1:])

if args.update_readme:
	db.update_markdown()
	print("Markdown README.md file successfully updated.")
	sys.exit(0)

texfilenames = [ ]
bibfilenames = [ ]
for filename in args.files:
	if filename.endswith(".tex"):
		texfilenames.append(filename)
	elif filename.endswith(".bib"):
		bibfilenames.append(filename)
	else:
		print("Given file '%s' has no known extension, cannot tell if TeX or bib file. Refusing the temptation to guess." % (filename))
		sys.exit(1)

if args.verbose:
	print("Scanning %d TeX and %d bibliography files." % (len(texfilenames), len(bibfilenames)))

apply_checks = db.get_check_classes(oset.parse(args.check))

bibliography = Bibliography(bibfilenames)
if args.verbose:
	print("Parsed %d bibliography entries." % (len(bibliography)))

citations = Citations()
citations.read_from_files(texfilenames)
if args.verbose:
	print("Parsed %d citations from TeX." % (len(citations)))

texfiles = [ TexPreprocessor(texfilename, machine_checking = (args.action == "lint") or args.internal_tex_reformat) for texfilename in texfilenames ]
if args.verbose:
	print("Parsed %d TeX files:" % (len(texfiles)))
	for texfile in texfiles:
		print("    - %s" % (texfile))

if args.output == "-":
	outfile = sys.stdout
else:
	outfile = open(args.output, "w")

with outfile:
	if args.action == "lint":
		complaints = [ ]
		for check_class in apply_checks:
			if args.verbose:
				print("Now checking %s: %s" % (check_class.linttarget, check_class.name))

			checker = check_class(args, bibliography, citations, texfiles)
			if (check_class.linttarget == "bib") and (check_class.linttype == "per_entry"):
				for entry in bibliography:
					if (not args.ignore_suppressions) and entry.suppressed(check_class.name):
						# Ignore this entry because of active suppresion
						continue
					if args.only_cited_bibentries and (not citations.citation_used(entry.name)):
						# Ignore this entry because it is never cited from TeX
						continue

					for complaint in checker.check_entry(entry):
						complaints.append(complaint)
			elif (check_class.linttarget == "bib") and (check_class.linttype == "once"):
				for complaint in checker.check_all():
					complaints.append(complaint)
			elif (check_class.linttarget == "tex") and (check_class.linttype in [ "n-words", "n-raw-words" ]):
				for texfile in texfiles:
					if check_class.linttype == "n-words":
						generator = texfile.n_words_iter(check_class.word_count)
					else:
						generator = texfile.n_raw_words_iter(check_class.word_count)
					for complaint in checker.check_n_words(texfile, generator):
						complaints.append(complaint)
			elif (check_class.linttarget == "tex") and (check_class.linttype == "once"):
				for complaint in checker.check_all():
					complaints.append(complaint)
			else:
				raise Exception("Unknown linttype %s for %s checker %s" % (check_class.linttype, check_class.linttarget, check_class.name))
		complaints.sort()

		if args.verbose:
			print("%d complaints found." % (len(complaints)))

		if args.format == "short":
			for complaint in complaints:
				complaint.short_dump(file = outfile)
		elif args.format == "long":
			for complaint in complaints:
				complaint.long_dump(file = outfile)
		elif args.format == "json":
			complaint_data = [ complaint.to_dict() for complaint in complaints ]
			print(json.dumps(complaint_data), file = outfile)
		elif args.format == "html":
			renderer = HTMLComplaintRenderer(complaints)
			print(renderer.render(), file = outfile)
		elif args.format == "quickfix":
			for complaint in complaints:
				complaint.print_vim_quickfix(outfile)
		else:
			raise Exception(NotImplemented)
	elif args.action == "authorscan":
		BibUtils(bibliography).author_scan(file = outfile)
	elif args.action == "printbib":
		bibliography.pretty_print(file = outfile)
	elif args.action == "printtex":
		for texfile in texfiles:
			print(texfile.text.text, file = outfile)
	else:
		raise Exception(NotImplemented)

